package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.21 DO NOT EDIT.

import (
	"context"
	"errors"
	"fmt"

	"com.example/graphql/graph/model"
)

var meetups = []*model.Meetup{
	{
		ID: "1",
		Name: "First meetup",
		Description: "First meetup",
	},
	{
		ID: "2",
		Name: "Second meetup",
		Description: "Second meetup",
	},
}

var users = []*model.User{
	{
		ID: "1",
		Username: "Bob",
		Email: "bob@email.com",
	},
	{
		ID: "2",
		Username: "Mike",
		Email: "mike@email.com",
	},
}

// User is the resolver for the user field.
func (r *meetupResolver) User(ctx context.Context, obj *model.Meetup) (*model.User, error) {
	user := new(model.User)
	for _, u := range users {
		if u.ID == obj.ID {
			user = u
			break
		}
	}

	if user == nil {
		return nil, errors.New("user does not exist")
	}

	return user, nil
}

// CreateMeetup is the resolver for the createMeetup field.
func (r *mutationResolver) CreateMeetup(ctx context.Context, input model.NewMeetup) (*model.Meetup, error) {
	panic(fmt.Errorf("not implemented: CreateMeetup - createMeetup"))
}

// Meetups is the resolver for the meetups field.
func (r *queryResolver) Meetups(ctx context.Context) ([]*model.Meetup, error) {
	return meetups, nil
}

// Meetups is the resolver for the meetups field.
func (r *userResolver) Meetups(ctx context.Context, obj *model.User) ([]*model.Meetup, error) {
	var m []*model.Meetup
	for _, mu := range meetups {
		if mu.ID == obj.ID {
			m = append(m, mu)
		}
	}
	
	return m, nil
}

// Meetup returns MeetupResolver implementation.
func (r *Resolver) Meetup() MeetupResolver { return &meetupResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// User returns UserResolver implementation.
func (r *Resolver) User() UserResolver { return &userResolver{r} }

type meetupResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type userResolver struct{ *Resolver }
